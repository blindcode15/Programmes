name: iOS Build (XcodeGen)
# ci: retrigger demo video

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build:
    name: Build MoodDiary (iOS 17)
    runs-on: macos-14
    steps:
      - name: Select Xcode 16
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.*'
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install XcodeGen
        run: |
          brew update
          brew install xcodegen

      - name: Generate Xcode Project
        run: xcodegen generate

      - name: Show Xcode version
        run: xcodebuild -version

      - name: List available simulators and runtimes
        run: |
          xcrun simctl list devices available
          echo '---'
          xcrun simctl list runtimes

      - name: Build for iOS Simulator (capture full log)
        run: |
          set +e
          set -o pipefail
          export NSUnbufferedIO=YES
          xcodebuild \
            -project MoodDiary.xcodeproj \
            -scheme MoodDiary \
            -sdk iphonesimulator \
            -destination 'generic/platform=iOS Simulator' \
            -configuration Debug \
            build \
            CODE_SIGNING_ALLOWED=NO 2>&1 | tee build-sim.log
          CODE=${PIPESTATUS[0]}
          echo "xcodebuild exit code: $CODE"
          exit $CODE
      - name: Upload build log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-sim-log
          path: build-sim.log
      - name: Show last compiler errors (summary)
        if: failure()
        run: |
          echo '--- Tail last 300 lines ---'
          tail -n 300 build-sim.log || true
          echo '--- Grep error/warning lines ---'
          grep -E "(error:|warning:)" -n build-sim.log || true
      - name: Record simulator video (ensure app is visible)
        if: always()
        run: |
          set +e
          set -o pipefail
          # Use .mov for best compatibility with simctl; we'll upload with wildcard
          VIDEO="$GITHUB_WORKSPACE/app-demo.mov"
          echo "VIDEO target: $VIDEO"
          # Determine simulator build output path
          SETTINGS=$(xcodebuild -project MoodDiary.xcodeproj -scheme MoodDiary -sdk iphonesimulator -configuration Debug -showBuildSettings)
          TARGET_BUILD_DIR=$(echo "$SETTINGS" | awk -F" = " '/TARGET_BUILD_DIR/ {print $2; exit}')
          APP_PATH="$TARGET_BUILD_DIR/MoodDiary.app"
          echo "APP_PATH=$APP_PATH"
          # Try to reuse a booted device first
          BOOTED=$(xcrun simctl list devices | awk -F '[()]' '/Booted/ {print $2; exit}')
          if [ -n "$BOOTED" ]; then
            DEVICE="$BOOTED"
            echo "Using already booted DEVICE=$DEVICE"
          else
            # Prefer iPhone 16 (iOS 18), then iPhone 15 (iOS 17), otherwise any available iPhone
            DEVICE=$(xcrun simctl list devices available | awk -F '[()]' '/iPhone 16/ {print $2; exit}')
            if [ -z "$DEVICE" ]; then
              DEVICE=$(xcrun simctl list devices available | awk -F '[()]' '/iPhone 15/ {print $2; exit}')
            fi
            if [ -z "$DEVICE" ]; then
              DEVICE=$(xcrun simctl list devices available | awk -F '[()]' '/iPhone/ {print $2; exit}')
            fi
            if [ -z "$DEVICE" ]; then
              echo "No available iPhone simulators found; creating one"
              RUNTIME=$(xcrun simctl list runtimes | awk -F '[()]' '/iOS/ && /Available/ {print $2; exit}')
              DEVICE=$(xcrun simctl create 'CI iPhone' 'iPhone 15' "$RUNTIME")
            fi
            echo "Using DEVICE=$DEVICE"
            # Boot and wait
            xcrun simctl boot "$DEVICE" || true
            xcrun simctl bootstatus "$DEVICE" -b || true
          fi
          TARGET=booted
          # Install app (best-effort)
          if [ -d "$APP_PATH" ]; then
            xcrun simctl install "$DEVICE" "$APP_PATH" || true
          else
            echo "App not found at $APP_PATH (build may have failed). Will record home screen."
          fi
          # Launch first to avoid capturing SpringBoard; give it a moment to settle
          echo "Launching app with DEMO_MODE..."
          xcrun simctl launch "$DEVICE" com.yourcompany.mood --args DEMO_MODE || true
          sleep 2
          # Start recording (force overwrite)
          xcrun simctl io "$DEVICE" recordVideo --codec=h264 --force "$VIDEO" &
          REC_PID=$!
          SECONDS=26
          echo "Recording for $SECONDS seconds..."
          sleep $SECONDS
          kill $REC_PID 2>/dev/null || true
          wait $REC_PID 2>/dev/null || true
          echo 'Recorded file:'
          ls -l "$VIDEO" || true
          # Fallback: take a screenshot if video missing
          if [ ! -f "$VIDEO" ]; then
            echo 'Video not found, taking a screenshot instead'
            xcrun simctl io "$DEVICE" screenshot "$GITHUB_WORKSPACE/app-screenshot.png" || true
          fi
      - name: Upload simulator video
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: simulator-video
          path: app-demo.*
      - name: Run UI snapshot tests
        run: |
          set -euo pipefail
          xcodebuild \
            -project MoodDiary.xcodeproj \
            -scheme MoodDiary \
            -sdk iphonesimulator \
            -destination 'platform=iOS Simulator,name=iPhone 16,OS=latest' \
            -configuration Debug \
            -only-testing:MoodDiaryScreenshots \
            test \
            CODE_SIGNING_ALLOWED=NO \
            | tee test-output.log \
            | xcpretty -c || true
      - name: Collect snapshots (from log)
        run: |
          mkdir -p snapshots
          # First, parse xcodebuild raw output for absolute file paths printed by tests
          if [ -f test-output.log ]; then
            awk '/SNAPSHOT:/ {print substr($0, index($0,$2))}' test-output.log | while read -r p; do
              if [ -f "$p" ]; then
                cp -v "$p" snapshots/ || true
              fi
            done
          fi
          # Fallback: scan typical temp roots for our MD_*.png with deeper search
          find /private/var/folders -type f -name 'MD_*.png' -maxdepth 12 -print -exec cp -v {} snapshots/ \; 2>/dev/null || true
          ls -la snapshots || true
      - name: Upload snapshots
        uses: actions/upload-artifact@v4
        with:
          name: ui-snapshots
          path: snapshots
